---
title: "QuES-C"
author: "Alfa"
format: html
editor: source
---

## Load library

```{r}
#| eval: false
install.packages(
  c("terra", "ggplot2", "splitstackshape", "foreign", "reshape2",
    "dplyr", "reshape", "purrr", "plotly", "devtools", "sf")
)
devtools::install_github("icraf-indonesia/LUMENSR")
```


```{r}
library(terra)
library(raster)
library(LUMENSR)
library(splitstackshape)
library(ggplot2)
library(foreign)
library(reshape2)
library(dplyr)
library(reshape)
library(purrr)
library(sf)
library(plotly)
```

## Load Functions

```{r}
generate_dummy_crosstab <- function(landcover, zone){
  if(!is.data.frame(landcover)) {
    stop("Land cover is not a data frame")
  }
  
  if(!is.data.frame(zone)) {
    stop("Zone is not a data frame")
  }
  
  n_lc <- nrow(landcover)
  n_pu <- nrow(zone)
  
  dummy1 <- data.frame(nPU = zone[,1], divider = n_lc*n_lc)
  dummy1 <- expandRows(dummy1, 'divider')
  
  dummy2 <- data.frame(nT1 = landcover[,1], divider = n_lc)
  dummy2 <- expandRows(dummy2, 'divider')
  dummy2 <- data.frame(nT1 = rep(dummy2$nT1, n_pu))
  
  dummy3 <- data.frame(nT2 = rep(rep(landcover[,1], n_lc), n_pu))
  
  lucDummy <- cbind(dummy1, dummy2, dummy3)
  colnames(lucDummy) <- c('ID_PU', 'ID_LC1', 'ID_LC2')
  return(lucDummy)
}

spatial_sync_raster <- function(unsynced,reference,method="ngb", size_only=FALSE,raster_size,verbose=FALSE,...) {
  if(!size_only) {
    new_projection=projection(reference)
    old_projection=projection(unsynced)
    
    new_res=res(reference)
    old_res=res(unsynced)
    
    # Check for rotation
    new_extent=bbox(reference)
    old_extent=bbox(unsynced)
    
    if((new_extent[1,1] < 0 && old_extent[1,1] >=0) || (new_extent[1,1] >= 0 && old_extent[1,1] <0)) {
      if(verbose) { message ("Rotating...") }
      unsynced_rotated=rotate(unsynced)
    } else
    {
      unsynced_rotated=unsynced
    }
    
    if(new_projection!=old_projection | new_res[1] != old_res[1] | new_res[2] != old_res[2])
    {
      pr_extent=projectExtent(unsynced_rotated, new_projection)
      # We need to fix the extent
      pr_extent <- setExtent(pr_extent,extent(reference))
      res(pr_extent)=res(reference)
      if(new_projection!=old_projection)
      {
        if(verbose) { message("Projecting and resampling...") }
        pr <- projectRaster(unsynced_rotated, pr_extent,method=method)
      } else
      {
        if(verbose) { message("Same projection, resampling only...") }
        pr <- raster::resample(unsynced_rotated, pr_extent,method=method)
      }
    } else
    {
      if(verbose) { message("Same projection and pixel size...") }
      pr=unsynced_rotated
    }
    
    if(verbose) { message("Expanding...") }
    expanded_raster=extend(pr,reference)
    if(verbose) { message("Cropping...") }
    synced_raster=crop(expanded_raster,reference)
    
    # This in theory shouldn't be neccesasary...
    if(verbose) { message("Fixing extents...") }
    extent(synced_raster)=extent(reference)
  } else {
    #		if(missing(raster_size))
    #		{
    #			stop("For size_only=TRUE you must set the raster_size as c(ncol,nrow)")
    #		} 
    
    unsynced_ncol=ncol(unsynced)
    unsynced_nrow=nrow(unsynced)
    
    # Eventually we should preserve the pixel size		
    unsynced_ulx=(raster_size[[1]]-unsynced_ncol)/2
    unsynced_uly=(raster_size[[2]]-unsynced_nrow)/2
    
    extent(unsynced)=extent(unsynced_ulx,unsynced_ulx+unsynced_ncol,unsynced_uly,unsynced_uly+unsynced_nrow)
    full_extent=extent(0,raster_size[[1]],0,raster_size[[2]])
    
    synced_raster=extend(unsynced,full_extent)
    extent(synced_raster)=full_extent
    res(synced_raster)=c(1,1)
  }
  #	if(!missing(filename))
  #	{
  #		writeRaster(synced_raster,...)
  #	}
  return(synced_raster)
  
}

print_area <- function(x){
  format(x, digits=15, big.mark=",")
}
print_rate <- function(x){
  format(x, digits=15, nsmall=2, decimal.mark=".", big.mark=",")
}

```

## Set Input Parameters

```{r}
landuse_1 <- "data/raster/tutupan_lahan_Bungo_2005r.tif"
landuse_2 <- "data/raster/tutupan_lahan_Bungo_2010r.tif"
period_1 <- 2005
period_2 <- 2010
# lc_table <- "data/03_bungo/31_tbl/Tabel_landuse_Bungo.csv"
planning_unit <- "data/vector/unit_perencanaan_bungo.shp"
c_table <- "data/table/Tabel_karbon_Bungo.csv"
working_directory <- getwd()
```

## Load Data

```{r}
zone_sf <- planning_unit %>% st_read()
zone <- zone_sf %>% rasterise_multipolygon(raster_res = c(100, 100), field = "IDS")
df_pu <- data.frame(ID_PU = zone_sf[[1]], PU = zone_sf[[2]])
```

```{r}
zone_rst <- zone %>% raster()
lc_t1 <- landuse_1 %>% raster() %>% spatial_sync_raster(zone_rst)
lc_t2 <- landuse_2 %>% raster() %>% spatial_sync_raster(zone_rst)
```

```{r}
#| eval: false
#=Set up landcover lookup table
df_lc <- read.csv(lc_table) #[, 1:2]
# colnames(lookup_lc) <- c("ID", "CLASS")
n_lc <- nrow(df_lc)
df_lc
```

```{r}
df_c <- read.csv(c_table)
df_c
```

### Setup the land-use land-cover maps

```{r}
#=Load landuse for two time periods
lc_t1 <- lc_t1 %>% rast() %>%
  add_legend_to_categorical_raster(., lookup_table = df_c, year = period_1)
lc_t2 <- lc_t2 %>% rast() %>%
  add_legend_to_categorical_raster(., lookup_table = df_c, year = period_2)
zone <- zone_rst %>% rast() %>%
  add_legend_to_categorical_raster(., lookup_table = df_pu)
```

## Pre-QUES

```{r}
preques_result <- ques_pre(lc_t1, lc_t2, zone)
```

Using dummy crosstable to keep all the combination land-use land-cover changes

```{r}
lucDummy <- generate_dummy_crosstab(df_c, df_pu)
```

```{r}
# join table
df_lucdb <- df_c %>% dplyr::rename(ID_LC1 = 1, C_T1 = 3) %>% 
  rename_with(.cols = 2, ~as.character(period_1)) %>% right_join(lucDummy, by="ID_LC1")
df_lucdb <- df_c %>% dplyr::rename(ID_LC2 = 1, C_T2 = 3) %>% 
  rename_with(.cols = 2, ~as.character(period_2)) %>% right_join(df_lucdb, by="ID_LC2")
df_lucdb <- df_pu %>% dplyr::rename(ID_PU = 1) %>% 
  rename_with(.cols = 2, ~names(zone)) %>% right_join(df_lucdb, by="ID_PU") 
df_lucdb <- df_lucdb %>% 
  left_join(
    preques_result[["landscape_level"]][["crosstab_long"]], 
    by = c(names(zone), as.character(period_1), as.character(period_2))
  ) 
# the full version of preques database from preques analysis combined with all possible landcover listed in the lookup table
df_lucdb <- df_lucdb %>% replace(is.na(df_lucdb), 0)
```

## QUES-C

### The initialization of carbon classification

```{r}
# create new matrix reclassification 
reclassify_matrix <- as.matrix(df_c[,1]) %>% 
  cbind(., as.matrix(df_c[,3])) %>%
  rbind(., c(0, NA))
reclassify_matrix
```

### Create carbon, emission, and sequestration maps

```{r}
# create all maps
map_carbon1 <- lc_t1 %>% classify(reclassify_matrix)
map_carbon2 <- lc_t2 %>% classify(reclassify_matrix)
map_emission <- ((map_carbon1 - map_carbon2) * 3.67) * (map_carbon1 > map_carbon2)
map_sequestration <- ((map_carbon2 - map_carbon1) * 3.67) * (map_carbon1 < map_carbon2)
```

### Generate QUES-C Database

```{r}
df_lucdb <- df_lucdb %>% mutate(
  EM = (C_T1 - C_T2) * (C_T1 > C_T2) * Ha * 3.67,
  SQ = (C_T2 - C_T1) * (C_T1 < C_T2) * Ha * 3.67,
  LU_CHG = do.call(paste, c(df_lucdb[c(as.character(period_1), as.character(period_2))], sep = " to "))
)
# quescdatabase
df_lucdb %>% head()
```

## Save output

```{r}
write.table(df_lucdb,
            paste0(working_directory, "/quesc_database.csv"), 
            quote=FALSE, 
            row.names=FALSE, 
            sep=",")
writeRaster(map_carbon1,
            paste0(working_directory, "/carbon_map_t1.tif"))
writeRaster(map_carbon2,
            paste0(working_directory, "/carbon_map_t2.tif"))
writeRaster(map_emission,
            paste0(working_directory, "/emission_map.tif"))
writeRaster(map_sequestration,
            paste0(working_directory, "/sequestration_map.tif"))
```


```{r}
area_zone <- quescdb %>% melt(id.vars=c('ID_PU', 'PU'), measure.vars=c('Ha')) %>%
  dcast(formula = ID_PU + PU ~ ., fun.aggregate = sum) %>%
  dplyr::rename(
    ID = 1,
    Ha = 3
  )
area_zone
```


```{r}
#=Calculate emission for each planning unit
zone_emission <- map_emission %>% 
  raster() %>%
  zonal(zone_rst, 'sum') %>%
  as.data.frame() %>%
  dplyr::rename(
    ID = 1,
    TOTAL_EM = 2
  )
zone_sequestration <- map_sequestration %>%
  raster() %>%
  zonal(zone_rst, 'sum') %>% 
  as.data.frame() %>%
  dplyr::rename(
    ID = 1,
    TOTAL_SQ = 2
  )

zone_carbon <- area_zone %>% 
  left_join(zone_emission, by = "ID") %>% 
  left_join(zone_sequestration, by = "ID") %>% 
  mutate(
    NET_EM = TOTAL_EM - TOTAL_SQ
  ) %>% 
  mutate(
    NET_EM_RATE = round(NET_EM / Ha / 5, 2)
  ) %>% 
  mutate(
    TOTAL_EM = round(TOTAL_EM, 2),
    TOTAL_SQ = round(TOTAL_SQ, 2),
    NET_EM = round(NET_EM, 2)
  )

total_area <- sum(area_zone$Ha)
total_emission <- sum(zone_carbon$TOTAL_EM)
total_sequestration <- sum(zone_carbon$TOTAL_SQ)
total_net_emission <- total_emission - total_sequestration
total_rate_emission <- total_net_emission / (period_2 - period_1)
total_rate_emission_ha <- total_rate_emission / total_area
```


```{r}
summary_df <- data.frame(
  ID = c(1:7),
  Category = c("Periode", 
               "Total area (ha)", 
               "Total Emisi (Ton CO2-eq)", 
               "Total Sequestrasi (Ton CO2-eq)", 
               "Emisi Bersih (Ton CO2-eq)", 
               "Laju Emisi (Ton CO2-eq/tahun)",
               "Laju emisi per-unit area (Ton CO2-eq/ha.tahun)"),
  # Category = c("Period", 
  #              "Total area (ha)", 
  #              "Total emission (tonne CO2-eq)", 
  #              "Total sequestration (tonne CO2-eq)", 
  #              "Net emission (tonne CO2-eq)", 
  #              "Emission rate (tonne CO2-eq/year)",
  #              "Emission rate per-unit area (tonne CO2-eq/ha.year)"),
  Summary = as.character(
              c(paste0(period_2, "-", period_1),
                print_area(round(total_area, 2)),
                print_rate(round(total_emission, 2)),
                print_rate(round(total_sequestration, 2)),
                print_rate(round(total_net_emission, 2)),
                print_rate(round(total_rate_emission, 2)),
                print_rate(round(total_rate_emission_ha, 2)))
  )
)
summary_df 
```


```{r}
period <- (period_2 - period_1)
data_zone <- area_zone
data_zone$Z_CODE <- toupper(abbreviate(data_zone$PU))
data_zone$Rate_seq <- data_zone$Rate_em <- data_zone$Avg_C_t2 <- data_zone$Avg_C_t1 <- 0
for(a in 1:nrow(area_zone)){
  i <- area_zone$PU[a]
  data_z <- quescdb[which(quescdb$PU == i),]
  data_zone <- within(data_zone, {Avg_C_t1<-ifelse(data_zone$PU == i, sum(data_z$C_T1*data_z$Ha)/sum(data_z$Ha),Avg_C_t1)}) 
  data_zone <- within(data_zone, {Avg_C_t2<-ifelse(data_zone$PU == i, sum(data_z$C_T2*data_z$Ha)/sum(data_z$Ha),Avg_C_t2)}) 
  data_zone <- within(data_zone, {Rate_em<-ifelse(data_zone$PU == i, sum(data_z$EM)/(sum(data_z$Ha)*period),Rate_em)}) 
  data_zone <- within(data_zone, {Rate_seq<-ifelse(data_zone$PU == i, sum(data_z$SQ)/(sum(data_z$Ha)*period),Rate_seq)}) 
}
# data_zone[,5:8]<-round(data_zone[,5:8],digits=2)
data_zone
```

```{r}
period <- (period_2 - period_1)
data_zone <- area_zone
data_zone$Z_CODE <- toupper(abbreviate(data_zone$PU))
data_zone$Rate_seq <- data_zone$Rate_em <- data_zone$Avg_C_t2 <- data_zone$Avg_C_t1 <- 0
for(a in 1:nrow(area_zone)){
  i <- area_zone$PU[a]
  data_z <- quescdb[which(quescdb$PU == i), ]
  data_zone <- within(data_zone, {
    Avg_C_t1 <- ifelse(data_zone$PU == i,
                       sum(data_z$C_T1 * data_z$Ha) / sum(data_z$Ha),
                       Avg_C_t1)
  }) 
  data_zone <- within(data_zone, {
    Avg_C_t2 <- ifelse(data_zone$PU == i,
                       sum(data_z$C_T2 * data_z$Ha) / sum(data_z$Ha),
                       Avg_C_t2)
  })
  data_zone <- within(data_zone, {
    Rate_em <- ifelse(data_zone$PU == i, 
                      sum(data_z$EM) / (sum(data_z$Ha) * period), 
                      Rate_em)
  })
  data_zone <- within(data_zone, {
    Rate_seq <- ifelse(data_zone$PU == i, sum(data_z$SQ) / (sum(data_z$Ha) * period), 
                       Rate_seq)
  }) 
}
# data_zone[,5:8]<-round(data_zone[,5:8],digits=2)
data_zone
```


```{r}
data_merge_sel <- quescdb %>% dplyr::filter(EM + SQ > 0)
order_sq <- quescdb[order(-quescdb$SQ), ] %>% as.data.frame()
order_em <- quescdb[order(-quescdb$EM), ] %>% as.data.frame()

# total emission
tb_em_total <- order_em$LU_CHG %>% 
  cbind( as.data.frame( round(order_em$EM, digits=3) ) ) %>% 
  as.data.frame() %>%
  dplyr::rename(
    LU_CHG = 1,
    EM = 2
  ) %>%
  aggregate(EM ~ LU_CHG, FUN = sum) %>%
  mutate(
    LU_CODE = as.factor(toupper(abbreviate(LU_CHG, minlength=5, strict=FALSE, method = "both")))
  ) %>%
  dplyr::arrange(desc(EM)) %>%
  dplyr::relocate(LU_CODE) 
  
tb_em_total_10 <- tb_em_total %>%
  mutate(
    PERCENTAGE = as.numeric(format(round((EM / sum(tb_em_total$EM) * 100),2), nsmall=2))
  ) %>%
  head(n=10)

# zonal emission
tb_em_zonal <- as.data.frame(NULL)
for (i in 1:nrow(area_zone)){
  tryCatch({
    tb_em <- order_em$PU %>% 
      cbind(order_em$LU_CHG, as.data.frame( round(order_em$EM, digits=3) ) ) %>% 
      as.data.frame() %>%
    dplyr::rename(
      PU = 1,
      LU_CHG = 2,
      EM = 3
    )
    
    a <- area_zone$PU[i] 
    tb_em_z <- tb_em %>% 
      dplyr::filter(PU == a) %>% 
      as.data.frame() %>%
      aggregate(EM ~ PU + LU_CHG, FUN=sum) %>%
      mutate(
        LU_CODE = as.factor(toupper(abbreviate(LU_CHG, minlength=5, strict=FALSE, method = "both")))
      ) %>%
      dplyr::arrange(desc(EM)) %>%
      dplyr::relocate(LU_CODE, .before = LU_CHG) 
    tb_em_z_10 <- tb_em_z %>% 
      mutate(
        PERCENTAGE = as.numeric(format(round((EM / sum(tb_em_z$EM) * 100),2), nsmall=2)) 
      ) %>% 
      head(n=10)
    tb_em_zonal <- tb_em_zonal %>% rbind(tb_em_z_10)
  },error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}

# total sequestration
tb_sq_total <- order_sq$LU_CHG %>% 
  cbind( as.data.frame( round(order_sq$EM, digits=3) ) ) %>% 
  as.data.frame() %>%
  dplyr::rename(
    LU_CHG = 1,
    SQ = 2
  ) %>%
  aggregate(SQ ~ LU_CHG, FUN = sum) %>%
  mutate(
    LU_CODE = as.factor(toupper(abbreviate(LU_CHG, minlength=5, strict=FALSE, method = "both")))
  ) %>%
  dplyr::arrange(desc(SQ)) %>%
  dplyr::relocate(LU_CODE) 
  
tb_sq_total_10 <- tb_sq_total %>% 
  mutate(
    PERCENTAGE = as.numeric(format(round((SQ / sum(tb_sq_total$SQ) * 100),2), nsmall=2))
  ) %>%
  head(n=10)

# zonal sequestration
tb_sq_zonal <- as.data.frame(NULL)
for (i in 1:nrow(area_zone)){
  tryCatch({
    tb_sq <- order_sq$PU %>% 
      cbind(order_sq$LU_CHG, as.data.frame( round(order_sq$SQ, digits=3) ) ) %>% 
      as.data.frame() %>%
    dplyr::rename(
      PU = 1,
      LU_CHG = 2,
      SQ = 3
    )
    
    a <- area_zone$PU[i] 
    tb_sq_z <- tb_sq %>% 
      dplyr::filter(PU == a) %>% 
      as.data.frame() %>%
      aggregate(SQ ~ PU + LU_CHG, FUN=sum) %>%
      mutate(
        LU_CODE = as.factor(toupper(abbreviate(LU_CHG, minlength=5, strict=FALSE, method = "both")))
      ) %>%
      dplyr::arrange(desc(SQ)) %>%
      dplyr::relocate(LU_CODE, .before = LU_CHG) 
    tb_sq_z_10 <- tb_sq_z %>% 
      mutate(
        PERCENTAGE = as.numeric(format(round((SQ / sum(tb_sq_z$SQ) * 100),2), nsmall=2))
      ) %>%
      head(n=10)
    tb_sq_zonal <- tb_sq_zonal %>% rbind(tb_sq_z_10)
  },error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
```


```{r}
start_time <- Sys.time()
end_time <- Sys.time()
out <- list(
    start_time = as.character(format(start_time, "%Y-%m-%d %H:%M:%S")),
    end_time = as.character(format(end_time, "%Y-%m-%d %H:%M:%S")),
    map_c1 = map_carbon1,
    map_c2 = map_carbon2,
    map_em = map_emission,
    map_sq = map_sequestration,
    ques_db = df_lucdb,
    p1 = period_1,
    p2 = period_2,
    inputs = list(
      lc_t1_path = landuse_1,
      lc_t2_path = landuse_2,
      admin_z_path = planning_unit,
      c_lookup_path = c_table,
      output_dir = working_directory
    ),
    session_log = session_log
  )
```

```{r}
params$start_time = out$start_time
params$end_time = out$end_time
params$map_c1 = out$map_c1
params$map_c2 = out$map_c2
params$map_em = out$map_em
params$map_sq = out$map_sq
params$ques_db = out$ques_db
params$p1 = out$p1
params$p2 = out$p2
params$inputs = out$inputs
params$session_log = out$session_log
```



```{r}
params <- list(
    start_time = out$start_time,
    end_time = out$end_time,
    map_c1 = out$map_c1,
    map_c2 = out$map_c2,
    map_em = out$map_em,
    map_sq = out$map_sq,
    ques_db = out$ques_db,
    p1 = out$p1,
    p2 = out$p2,
    inputs = out$inputs,
    session_log = out$session_log
  )
```

