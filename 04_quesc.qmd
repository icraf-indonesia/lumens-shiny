---
title: "QuES-C"
author: "Alfa"
format: html
editor: source
---

## Load library

```{r}
#| eval: false
install.packages(
  c("terra", "ggplot2", "splitstackshape", "foreign", "reshape2",
    "dplyr", "reshape", "purrr", "plotly", "devtools", "sf")
)
devtools::install_github("icraf-indonesia/LUMENSR")
```


```{r}
library(terra)
library(raster)
library(LUMENSR)
library(splitstackshape)
library(ggplot2)
library(foreign)
library(reshape2)
library(dplyr)
library(reshape)
library(purrr)
library(sf)
library(plotly)
```

## Load Functions

```{r}
generate_dummy_crosstab <- function(landcover, zone){
  if(!is.data.frame(landcover)) {
    stop("Land cover is not a data frame")
  }
  
  if(!is.data.frame(zone)) {
    stop("Zone is not a data frame")
  }
  
  n_lc <- nrow(landcover)
  n_pu <- nrow(zone)
  
  dummy1 <- data.frame(nPU = zone[,1], divider = n_lc*n_lc)
  dummy1 <- expandRows(dummy1, 'divider')
  
  dummy2 <- data.frame(nT1 = landcover[,1], divider = n_lc)
  dummy2 <- expandRows(dummy2, 'divider')
  dummy2 <- data.frame(nT1 = rep(dummy2$nT1, n_pu))
  
  dummy3 <- data.frame(nT2 = rep(rep(landcover[,1], n_lc), n_pu))
  
  lucDummy <- cbind(dummy1, dummy2, dummy3)
  colnames(lucDummy) <- c('ID_PU', 'ID_LC1', 'ID_LC2')
  return(lucDummy)
}

spatial_sync_raster <- function(unsynced,reference,method="ngb", size_only=FALSE,raster_size,verbose=FALSE,...) {
  if(!size_only) {
    new_projection=projection(reference)
    old_projection=projection(unsynced)
    
    new_res=res(reference)
    old_res=res(unsynced)
    
    # Check for rotation
    new_extent=bbox(reference)
    old_extent=bbox(unsynced)
    
    if((new_extent[1,1] < 0 && old_extent[1,1] >=0) || (new_extent[1,1] >= 0 && old_extent[1,1] <0)) {
      if(verbose) { message ("Rotating...") }
      unsynced_rotated=rotate(unsynced)
    } else
    {
      unsynced_rotated=unsynced
    }
    
    if(new_projection!=old_projection | new_res[1] != old_res[1] | new_res[2] != old_res[2])
    {
      pr_extent=projectExtent(unsynced_rotated, new_projection)
      # We need to fix the extent
      pr_extent <- setExtent(pr_extent,extent(reference))
      res(pr_extent)=res(reference)
      if(new_projection!=old_projection)
      {
        if(verbose) { message("Projecting and resampling...") }
        pr <- projectRaster(unsynced_rotated, pr_extent,method=method)
      } else
      {
        if(verbose) { message("Same projection, resampling only...") }
        pr <- raster::resample(unsynced_rotated, pr_extent,method=method)
      }
    } else
    {
      if(verbose) { message("Same projection and pixel size...") }
      pr=unsynced_rotated
    }
    
    if(verbose) { message("Expanding...") }
    expanded_raster=extend(pr,reference)
    if(verbose) { message("Cropping...") }
    synced_raster=crop(expanded_raster,reference)
    
    # This in theory shouldn't be neccesasary...
    if(verbose) { message("Fixing extents...") }
    extent(synced_raster)=extent(reference)
  } else {
    #		if(missing(raster_size))
    #		{
    #			stop("For size_only=TRUE you must set the raster_size as c(ncol,nrow)")
    #		} 
    
    unsynced_ncol=ncol(unsynced)
    unsynced_nrow=nrow(unsynced)
    
    # Eventually we should preserve the pixel size		
    unsynced_ulx=(raster_size[[1]]-unsynced_ncol)/2
    unsynced_uly=(raster_size[[2]]-unsynced_nrow)/2
    
    extent(unsynced)=extent(unsynced_ulx,unsynced_ulx+unsynced_ncol,unsynced_uly,unsynced_uly+unsynced_nrow)
    full_extent=extent(0,raster_size[[1]],0,raster_size[[2]])
    
    synced_raster=extend(unsynced,full_extent)
    extent(synced_raster)=full_extent
    res(synced_raster)=c(1,1)
  }
  #	if(!missing(filename))
  #	{
  #		writeRaster(synced_raster,...)
  #	}
  return(synced_raster)
  
}
```

## Set Input Parameters

```{r}
landuse_1 <- "data/03_bungo/11_rast/tutupan_lahan_Bungo_2005r.tif"
landuse_2 <- "data/03_bungo/11_rast/tutupan_lahan_Bungo_2010r.tif"
period_1 <- 2005
period_2 <- 2010
# lc_table <- "data/03_bungo/31_tbl/Tabel_landuse_Bungo.csv"
planning_unit <- "data/03_bungo/21_vect/unit_perencanaan_bungo.shp"
c_table <- "data/03_bungo/31_tbl/Tabel_karbon_Bungo.csv"
working_directory <- getwd()
```

## Load Data

```{r}
zone_sf <- planning_unit %>% st_read()
zone <- zone_sf %>% rasterise_multipolygon(raster_res = c(100, 100), field = "IDS")
df_pu <- data.frame(ID_PU = zone_sf[[1]], PU = zone_sf[[2]])
```

```{r}
zone_rst <- zone %>% raster()
lc_t1 <- landuse_1 %>% raster() %>% spatial_sync_raster(zone_rst)
lc_t2 <- landuse_2 %>% raster() %>% spatial_sync_raster(zone_rst)
```

```{r}
#| eval: false
#=Set up landcover lookup table
df_lc <- read.csv(lc_table) #[, 1:2]
# colnames(lookup_lc) <- c("ID", "CLASS")
n_lc <- nrow(df_lc)
df_lc
```

```{r}
df_c <- read.csv(c_table)
df_c
```

### Setup the land-use land-cover maps

```{r}
#=Load landuse for two time periods
lc_t1 <- lc_t1 %>% rast() %>%
  add_legend_to_categorical_raster(., lookup_table = df_c, year = period_1)
lc_t2 <- lc_t2 %>% rast() %>%
  add_legend_to_categorical_raster(., lookup_table = df_c, year = period_2)
zone <- zone_rst %>% rast() %>%
  add_legend_to_categorical_raster(., lookup_table = df_pu)
```

## Pre-QUES

```{r}
preques_result <- ques_pre(lc_t1, lc_t2, zone)
```

Using dummy crosstable to keep all the combination land-use land-cover changes

```{r}
lucDummy <- generate_dummy_crosstab(df_lc, df_pu)
```

```{r}
# join table
df_lucdb <- df_c %>% dplyr::rename(ID_LC1 = 1, C_T1 = 3) %>% 
  rename_with(.cols = 2, ~as.character(period_1)) %>% right_join(lucDummy, by="ID_LC1")
df_lucdb <- df_c %>% dplyr::rename(ID_LC2 = 1, C_T2 = 3) %>% 
  rename_with(.cols = 2, ~as.character(period_2)) %>% right_join(df_lucdb, by="ID_LC2")
df_lucdb <- df_pu %>% dplyr::rename(ID_PU = 1) %>% 
  rename_with(.cols = 2, ~names(zone)) %>% right_join(df_lucdb, by="ID_PU") 
df_lucdb <- df_lucdb %>% 
  left_join(
    preques_result[["landscape_level"]][["crosstab_long"]], 
    by = c(names(zone), as.character(period_1), as.character(period_2))
  ) 
# the full version of preques database from preques analysis combined with all possible landcover listed in the lookup table
df_lucdb <- df_lucdb %>% replace(is.na(df_lucdb), 0)
```

## QUES-C

### The initialization of carbon classification

```{r}
# create new matrix reclassification 
reclassify_matrix <- as.matrix(df_c[,1]) %>% 
  cbind(., as.matrix(df_c[,3])) %>%
  rbind(., c(0, NA))
reclassify_matrix
```

### Create carbon, emission, and sequestration maps

```{r}
# create all maps
map_carbon1 <- lc_t1 %>% classify(reclassify_matrix)
map_carbon2 <- lc_t2 %>% classify(reclassify_matrix)
map_emission <- ((map_carbon1 - map_carbon2) * 3.67) * (map_carbon1 > map_carbon2)
map_sequestration <- ((map_carbon2 - map_carbon1) * 3.67) * (map_carbon1 < map_carbon2)
```

### Generate QUES-C Database

```{r}
df_lucdb <- df_lucdb %>% mutate(
  EM = (C_T1 - C_T2) * (C_T1 > C_T2) * Ha * 3.67,
  SQ = (C_T2 - C_T1) * (C_T1 < C_T2) * Ha * 3.67,
  LU_CHG = do.call(paste, c(df_lucdb[c(as.character(period_1), as.character(period_2))], sep = " to "))
)
# quescdatabase
df_lucdb %>% head()
```

## Save output

```{r}
write.table(df_lucdb,
            paste0(working_directory, "/quesc_database.csv"), 
            quote=FALSE, 
            row.names=FALSE, 
            sep=",")
writeRaster(map_carbon1,
            paste0(working_directory, "/carbon_map_t1.tif"))
writeRaster(map_carbon2,
            paste0(working_directory, "/carbon_map_t2.tif"))
writeRaster(map_emission,
            paste0(working_directory, "/emission_map.tif"))
writeRaster(map_sequestration,
            paste0(working_directory, "/sequestration_map.tif"))
```

